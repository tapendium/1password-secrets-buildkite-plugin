#!/bin/bash

set -eo pipefail

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

opExecutable="${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_BIN:-op}"

export OP_EXE="${opExecutable}"

# shellcheck source=lib/shared.sh
. "$CWD/../lib/shared.sh"

if [[ "${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_DEBUG:-false}" =~ (true|on|1) ]]; then
	echo "~~~ :hammer: Enabling debug mode"
	set -x
fi

connectHost="${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_CONNECT_HOST:-$OP_CONNECT_HOST}"

if [ -z "${connectHost}" ]; then
	echo >&2 "Missing OP_CONNECT_HOST or connect_host"
	exit 22
fi

# API token is either set directly as environment variable in OP_CONNECT_TOKEN or as AWS secrets manager secret
tokenSecretRef="${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_CONNECT_TOKEN}"

if [[ -z "${OP_CONNECT_TOKEN}" && -z "${tokenSecretRef}" ]]; then
	echo >&2 "OP_CONNECT_TOKEN environment variable or connect_token field must be specified"
	exit 1
fi

if [ -n "${OP_CONNECT_TOKEN}" ]; then
	connectToken="${OP_CONNECT_TOKEN}"
else
	connectToken="$(getToken "${tokenSecretRef}")"
fi

if [ -z "${connectToken}" ]; then
	echo >&2 "Missing connect_token"
	exit 22
fi

export OP_CONNECT_HOST="${connectHost}"
export OP_CONNECT_TOKEN="${connectToken}"

while IFS='=' read -r name _; do
  if [[ $name =~  ^(BUILDKITE_PLUGIN_1PASSWORD_SECRETS_FILE_[0-9]+_PATH)$ ]]; then
    inputPath=${!name}
    injectSecrets "$inputPath"
  fi
done < <(env | sort)

# Clear OP_CONNECT_TOKEN after reading secrets
if [[ "${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_CLEAR_TOKEN:-true}" =~ (true|on|1) ]]; then
	echo "~~~ :lock: Removing OP_CONNECT_TOKEN from environment"
	unset OP_CONNECT_TOKEN
fi
