#!/bin/bash

set -eo pipefail

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck source=lib/shared.sh
. "$CWD/../lib/shared.sh"

load_secret_into_env() {
	local exportName=$1
	local secretUuid=$2
	local secretField=$(expandVariable $3)
	local secretValue

	echo "Reading item \"$secretUuid\" field \"$secretField\" from 1Password into environment variable $exportName"

	secretValue=$(getField "$secretUuid" "$secretField")
	export "$exportName"="$secretValue"
}

if [[ "${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_DEBUG:-false}" =~ (true|on|1) ]]; then
	echo "~~~ :hammer: Enabling debug mode"
	set -x
fi

connectHost="${OP_CONNECT_HOST:-${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_CONNECT_HOST:-}}"
connectToken="${OP_CONNECT_TOKEN:-${BUILDKITE_PLUGIN_1PASSWORD_SECRETS_CONNECT_TOKEN:-}}"

if [ -z "${connectHost}" ]; then
	echo >&2 "Missing OP_CONNECT_HOST or connect_host"
	exit 22
fi

if [ -z "${connectToken}" ]; then
	echo >&2 "Missing OP_CONNECT_TOKEN or connect_token"
	exit 22
fi

export OP_CONNECT_HOST="${connectHost}"
export OP_CONNECT_TOKEN="${connectToken}"

while IFS='=' read -r name _; do
	if [[ $name =~ ^(BUILDKITE_PLUGIN_1PASSWORD_SECRETS_ENV_) ]]; then
		if [[ $name =~ (_SECRET_UUID)$ ]]; then
			# get the export name from the key, e.g.
			# env:
			#   KEY_NAME:
			#     secret-uuid: 'my-secret-uuid'
			exportName=$(echo "${name}" | sed 's/^BUILDKITE_PLUGIN_1PASSWORD_SECRETS_ENV_//' | sed 's/_SECRET_UUID$//')
			secretUuid=${!name}
			secretFieldName="BUILDKITE_PLUGIN_1PASSWORD_SECRETS_ENV_${exportName}_FIELD"
			secretField=${!secretFieldName}
		elif [[ $name =~ (_FIELD)$ ]]; then
			# ignore this
			continue
		fi
		load_secret_into_env "$exportName" "$secretUuid" "$secretField"
	fi
done < <(env | sort)
